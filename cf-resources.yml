cloudFormationTags: &TAGS
  - Key: environment
    Value: ${self:custom.tags.environment}
  - Key: application
    Value: ${self:custom.tags.application}

corsOptionsIntegration: &CORS_OPTIONS_INTEGRATION
  Type: MOCK
  RequestTemplates:
    "application/json": >-
      {
        "statusCode": 200
      }
  IntegrationResponses:
    - StatusCode: "200"
      ResponseParameters:
        "method.response.header.Access-Control-Allow-Origin": "'*'"
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-RequestId'"
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
        "method.response.header.Access-Control-Allow-Credentials": "'false'"
        "method.response.header.Content-Type": "'application/json'"
      ResponseTemplates:
        "application/json": ""

corsOptionsMethodResponses: &CORS_OPTIONS_METHOD_RESPONSES
  - StatusCode: "200"
    ResponseParameters:
      "method.response.header.Access-Control-Allow-Origin": true
      "method.response.header.Access-Control-Allow-Headers": true
      "method.response.header.Access-Control-Allow-Methods": true
      "method.response.header.Access-Control-Allow-Credentials": true
      "method.response.header.Content-Type": true

resources:
  Description: AMAVM VDH API for the ${opt:stage} environment.

  Resources:

    ApiGatewayRestApi:
      Properties:
          MinimumCompressionSize: 860 # Based on Akamai heuristic

    # CloudWatch Alarm for API Gateway
    ApiGatewayCloudWatchAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: AWS/ApiGateway
        MetricName: 5XXError
        AlarmDescription: 5XXError for ${self:service}/${self:custom.environment}
        Threshold: 3
        Period: 60
        EvaluationPeriods: 5
        Statistic: Average
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: APIName
            Value: ${self:custom.environment}-${self:service}
          - Name: Stage
            Value: ${self:custom.environment}

    # S3 assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        BucketName: ${self:custom.config.bucket}
        Tags: *TAGS
        VersioningConfiguration:
          Status: Enabled
        WebsiteConfiguration:
          IndexDocument: index.html

    SSMParameterAssetsBucketWebsiteURL:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: ${self:custom.parameterStorePrefix}/assets/root
        Type: String
        Value:
          Fn::GetAtt:
            - AssetsBucket
            - WebsiteURL

    AssetsBucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: AssetsBucket
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: AssetsBucket
                    - "/*"
              Principal: "*"

    # /info api endpoint.
    ApiGatewayResourceInfo:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: info
        RestApiId:
          Ref: ApiGatewayRestApi
    ApiGatewayMethodInfoGet:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId:
          Ref: ApiGatewayResourceInfo
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: POST
          Type: MOCK
          RequestTemplates:
            "application/json": >-
              {
                "statusCode": 200
              }
          IntegrationResponses:
            - StatusCode: "200"
              ResponseParameters:
                "method.response.header.Access-Control-Allow-Origin": "'*'"
                "method.response.header.Content-Type": "'application/json'"
              ResponseTemplates:
                "application/json": >-
                  #set($inputRoot = $input.path('$'))
                  {
                    "name": "$context.apiId",
                    "environment": "$context.stage",
                    "version": "${self:custom.apiVersion}",
                    "timestamp": "${self:custom.timestamp}"
                  }
        MethodResponses:
          - StatusCode: "200"
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": true
              "method.response.header.Content-Type": true
    ApiGatewayMethodInfoOptions:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: OPTIONS
        ResourceId:
          Ref: ApiGatewayResourceInfo
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: NONE
        Integration: *CORS_OPTIONS_INTEGRATION
        MethodResponses: *CORS_OPTIONS_METHOD_RESPONSES

    # /openapi api endpoint.
    ApiGatewayResourceOpenApi:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: openapi
        RestApiId:
          Ref: ApiGatewayRestApi
    ApiGatewayMethodOpenApiGet:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId:
          Ref: ApiGatewayResourceOpenApi
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: GET
          Type: MOCK
          RequestTemplates:
            "application/json": >-
              {
                "statusCode": 200
              }
          IntegrationResponses:
            - StatusCode: "200"
              ResponseParameters:
                "method.response.header.Access-Control-Allow-Origin": "'*'"
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-RequestId'"
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
                "method.response.header.Content-Type": "'application/json'"
              ResponseTemplates:
                "application/json": "#[[ ${file(./build/openapi.js)} ]]#"
        MethodResponses:
          - StatusCode: "200"
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": true
              "method.response.header.Access-Control-Allow-Headers": true
              "method.response.header.Access-Control-Allow-Methods": true
              "method.response.header.Access-Control-Allow-Credentials": true
              "method.response.header.Content-Type": true
    ApiGatewayMethodOpenApiOptions:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: OPTIONS
        ResourceId:
          Ref: ApiGatewayResourceOpenApi
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: NONE
        Integration: *CORS_OPTIONS_INTEGRATION
        MethodResponses: *CORS_OPTIONS_METHOD_RESPONSES